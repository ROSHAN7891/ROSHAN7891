Import warnings
Import numpy as np
Import pandas as pd
Import matplotlib.pyplot as plt
Import seaborn as sns
Plt.style.use(‘fivethirtyeight’)
%matplotlib inline
Warnings.filterwarnings(‘ignore’)

Train = pd.read_csv(‘train.csv’)
Test = pd.read_csv(‘test.csv’)
  
# To know number of columns and rows
Train.shape
# (891, 12)


Train.info()
Train.isnull().sum()

Train.isnull().sum()
F, ax = plt.subplots(1, 2, figsize=(12, 4))
Train[‘Survived’].value_counts().plot.pie(
    Explode=[0, 0.1], autopct=’%1.1f%%’, ax=ax[0], shadow=False)
Ax[0].set_title(‘Survivors (1) and the dead (0)’)
Ax[0].set_ylabel(‘’)
Sns.countplot(‘Survived’, data=train, ax=ax[1])
Ax[1].set_ylabel(‘Quantity’)
Ax[1].set_title(‘Survivors (1) and the dead (0)’)
Plt.show()
F, ax = plt.subplots(1, 2, figsize=(12, 4))
Train[[‘Sex’, ‘Survived’]].groupby([‘Sex’]).mean().plot.bar(ax=ax[0])
Ax[0].set_title(‘Survivors by sex’)
Sns.countplot(‘Sex’, hue=’Survived’, data=train, ax=ax[1])
Ax[1].set_ylabel(‘Quantity’)
Ax[1].set_title(‘Survived (1) and deceased (0): men and women’)
Plt.show()
# Create a new column cabinbool indicating
# if the cabin value was given or was NaN
Train[“CabinBool”] = (train[“Cabin”].notnull().astype(‘int’))
Test[“CabinBool”] = (test[“Cabin”].notnull().astype(‘int’))
  
# Delete the column ‘Cabin’ from test
# and train dataset
Train = train.drop([‘Cabin’], axis=1)
Test = test.drop([‘Cabin’], axis=1
Train = train.drop([‘Ticket’], axis=1)
Test = test.drop([‘Ticket’], axis=1)

Replacing the missing values in 
# the Embarked feature with S
Train = train.fillna({“Embarked”:
# sort the ages into logical categories
Train[“Age”] = train[“Age”].fillna(-0.5)
Test[“Age”] = test[“Age”].fillna(-0.5)
Bins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]
Labels = [‘Unknown’, ‘Baby’, ‘Child’, ‘Teenager’,
          ‘Student’, ‘Young Adult’, ‘Adult’, ‘Senior’]
Train[‘AgeGroup’] = pd.cut(train[“Age”], bins, labels=labels)
Test[‘AgeGroup’] = pd.cut(test[“Age”], bins, labels=labels)

# create a combined group of both datasets
Combine = [train, test]
  
# extract a title for each Name in the 
# train and test datasets
For dataset in combine:
    Dataset[‘Title’] = dataset.Name.str.extract(‘ ([A-Za-z]+)\.’, expand=False)
  
Pd.crosstab(train[‘Title’], train[‘Sex’])
  
# replace various titles with more common names
For dataset in combine:
    Dataset[‘Title’] = dataset[‘Title’].replace([‘Lady’, ‘Capt’, ‘Col’,
                                                 ‘Don’, ‘Dr’, ‘Major’,
                                                 ‘Rev’, ‘Jonkheer’, ‘Dona’],
                                                ‘Rare’)
  
    Dataset[‘Title’] = dataset[‘Title’].replace(
        [‘Countess’, ‘Lady’, ‘Sir’], ‘Royal’)
    Dataset[‘Title’] = dataset[‘Title’].replace(‘Mlle’, ‘Miss’)
    Dataset[‘Title’] = dataset[‘Title’].replace(‘Ms’, ‘Miss’)
    Dataset[‘Title’] = dataset[‘Title’].replace(‘Mme’, ‘Mrs’)
  
Train[[‘Title’, ‘Survived’]].groupby([‘Title’], as_index=False).mean()
  
# map each of the title groups to a numerical value
Title_mapping = {“Mr”: 1, “Miss”: 2, “Mrs”: 3,
                 “Master”: 4, “Royal”: 5, “Rare”: 6}
For dataset in combine:
    Dataset[‘Title’] = dataset[‘Title’].map(title_mapping)
    Dataset[‘Title’] = dataset[‘Title’].fillna(0)
Mr_age = train[train[“Title”] == 1][“AgeGroup”].mode()  # Young Adult
Miss_age = train[train[“Title”] == 2][“AgeGroup”].mode()  # Student
Mrs_age = train[train[“Title”] == 3][“AgeGroup”].mode()  # Adult
Master_age = train[train[“Title”] == 4][“AgeGroup”].mode()  # Baby
Royal_age = train[train[“Title”] == 5][“AgeGroup”].mode()  # Adult
Rare_age = train[train[“Title”] == 6][“AgeGroup”].mode()  # Adult
  
Age_title_mapping = {1: “Young Adult”, 2: “Student”,
                     3: “Adult”, 4: “Baby”, 5: “Adult”, 6: “Adult”}
  
For x in range(len(train[“AgeGroup”])):
    If train[“AgeGroup”][x] == “Unknown”:
        Train[“AgeGroup”][x] = age_title_mapping[train[“Title”][x]]
  
For x in range(len(test[“AgeGroup”])):
    If test[“AgeGroup”][x] == “Unknown”:
        Test[“AgeGroup”][x] = age_title_mapping[test[“Title”][x]]
# map each Age value to a numerical value
Age_mapping = {‘Baby’: 1, ‘Child’: 2, ‘Teenager’: 3,
               ‘Student’: 4, ‘Young Adult’: 5, ‘Adult’: 6, 
               ‘Senior’: 7}
Train[‘AgeGroup’] = train[‘AgeGroup’].map(age_mapping)
Test[‘AgeGroup’] = test[‘AgeGroup’].map(age_mapping)
  
Train.head()
  
# dropping the Age feature for now, might change
Train = train.drop([‘Age’], axis=1)
Test = test.drop([‘Age’], axis=1)
Train = train.drop([‘Name’], axis=1)
Test = test.drop([‘Name’], axis=1)
Sex_mapping = {“male”: 0, “female”: 1}
Train[‘Sex’] = train[‘Sex’].map(sex_mapping)
Test[‘Sex’] = test[‘Sex’].map(sex_mapping)
  
Embarked_mapping = {“S”: 1, “C”: 2, “Q”: 3}
Train[‘Embarked’] = train[‘Embarked’].map(embarked_mapping)
Test[‘Embarked’] = test[‘Embarked’].map(embarked_mapping)

For x in range(len(test[“Fare”])):
    If pd.isnull(test[“Fare”][x]):
        Pclass = test[“Pclass”][x]  # Pclass = 3
        Test[“Fare”][x] = round(
            Train[train[“Pclass”] == pclass][“Fare”].mean(), 4)
  
# map Fare values into groups of 
# numerical values
Train[‘FareBand’] = pd.qcut(train[‘Fare’], 4, 
                            Labels=[1, 2, 3, 4])
Test[‘FareBand’] = pd.qcut(test[‘Fare’], 4, 
                           Labels=[1, 2, 3, 4])
  
# drop Fare values
Train = train.drop([‘Fare’], axis=1)
Test = test.drop([‘Fare’], axis=1)

From sklearn.model_selection import train_test_split
  
# Drop the Survived and PassengerId
# column from the trainset
Predictors = train.drop([‘Survived’, ‘PassengerId’], axis=1)
Target = train[“Survived”]
X_train, x_val, y_train, y_val = train_test_split(
    Predictors, target, test_size=0.2, random_state=0)
From sklearn.ensemble import RandomForestClassifier
From sklearn.metrics import accuracy_score
  
Randomforest = RandomForestClassifier()
  
# Fit the training data along with its output
Randomforest.fit(x_train, y_train)
Y_pred = randomforest.predict(x_val)
  
# Find the accuracy score of the model
Acc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)
Print(acc_randomforest)

Ids = test[‘PassengerId’]
Predictions = randomforest.predict(test.drop(‘PassengerId’, axis=1))
  
# set the output as a dataframe and convert 
# to csv file named resultfile.csv
Output = pd.DataFrame({‘PassengerId’: ids, ‘Survived’: predictions})
Output.to_csv(‘resultfile.csv’, index=

